---
layout: post
title:  "Культура commit-ов"
date:   2020-12-04 18:00:00 +0300
update: 2020-12-05 14:09:00 +0300
type: статья
comments: true
---
С самого начал работы с [системами контроля версий][VCS], будь то [SVN][SVN], [Mercurial][ML] или [Git][GIT], 
я задал себе вопрос: 
> "Как правильно, а главное **качественно** писать комментарий к своему изменению кода?"

И казалось бы, что может быть проще ответа: **"Что сделал, то и Опиши"**. 

Но на практике всё оказалось немного сложнее.

- [Ошибки](#ошибки)
- [Выход есть](#выход-есть)
- [Заключение](#заключение)

## Ошибки

Когда проект молодой, и первый, а возможно и последующие, его этапы разработки идут под лозунгом:
> Сроки горят

мало кто задумывается о такой мелочи как текст, который оставляют причастные к коду люди в [системе контроля версий][VCS].

**В конечном итоге история проекта принимает вид "мусорки", в которую кладут "отходы" без разделения.**

"И что в этом плохого?" - сразу возникнет вопрос. Если посмотреть поверхностно - ничего.
 
Проекту, от того, что фигурирует в истории к коду - всё равно, он и так собирается и выполняет свои бизнес задачи.

Проходит время. Проект растёт. Количество и виды комментариев увеличиваются, мелькают строки со смайликами, 
номерами задач, невразумительными `fix`, `reviw`, упражнения в английском и т.д. 

Работники всё чаще и чаще начинают сталкиваться с необходимостью смотреть историю, 
чтоб понять кто изменил тот или иной участок кода и в рамках какой задачи.

И каково же бывает удивление, когда находиться нужный `commit` из **15**-и файлов с комментарием `fix2` от человека, 
который уже __не работает__ на проекте.

## Выход есть

И он заключается в следовании простым правилам с начала проекта или с момента, 
когда всем в команде стало понятно, что так дальше нельзя.

- #### Обсудить и зафиксировать язык комментариев
    Как показывает практика, в историях проектов, часто можно увидеть использование нескольких языков.

- #### Начать придерживаться [конвенции][CC]  
    Это не только стандартизирует ваши сообщения, но и сделает их удобными для автоматической обработки.

    Например, следование конвенции позволит вам создавать `CHANGELOG.md` файл, который при правильном ведении комментариев может стать 
    удобной навигацией по прогрессу проекта.

    В [changelog-builder/blob/master/CHANGELOG.md][CLF] можно увидеть пример того, как выглядит автоматически формируемый файл.

    Кстати, проект [changelog-builder][CLB-PROJECT] предназначен для формирования `CHANGELOG.md` файла и Вы можете им воспользоваться.
    Неважно, придерживаетесь ли Вы конвенции или нет, файл сформируется, но вот насколько он будет удобочитаем и понятен - это Вы и проверите.

    Так же для __IntelliJ IDEA__ я немного усовершенствовал [плагин][GCT-PROJECT], который позволяет легко набирать комментарии согласно [конвенции][CC].

- #### Использовать [squash][SQUASH]
    Когда в удалённый репозиторий отправляется две одинаковых строки комментария - это повод задуматься.

    "А одинаковые ли причины несут эти изменения?", - и в `100%` случаях ответ - **НЕТ**.

- #### Использовать [push --force][PUSH-FORCE]
    Если в _своей_ **отдельной локальной ветке** вы навели в _своих_ комментариях порядок, не забудьте отправить изменения **в свою ветку** на удалённый сервер.

- #### Не писать "что сделали", писать "что сделано"
    Как только в ваших комментариях фразы `сделал`, `откорректировал`, `реализовал`, `пофиксил`, и т.д будут заменены на `сделано`, `откорректировано`, `реализовано`, они 
    сразу приобретут деловой стиль и будут отражать **изменения в проекте**, а не **изменения конкретным человеком**.   

    До
    > откорректировал регулярное выражение, так как не обрабатывались некоторые случаи

    После
    > откорректировано регулярное выражение, так как случай ```рамма``` не обрабатывался 

    Для своих проектов я написал и начал использовать [git-hook][GIT-HOOK] [commit-msg][COMMIT-MSG], 
    который проверяет обязательное наличие в комментариях хотя бы одного слова из списка.

## Заключение

Правильная работа с историей комментариев - это такая же важная часть разработки приложения, как и написание кода.

А как в вашей команде обстоят дела с историей commit-ов?

Успехов!

[VCS]: https://ru.wikipedia.org/wiki/%D0%A1%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0_%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F_%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8
[SVN]: https://ru.wikipedia.org/wiki/Subversion#:~:text=Subversion%20(%D1%82%D0%B0%D0%BA%D0%B6%D0%B5%20%D0%B8%D0%B7%D0%B2%D0%B5%D1%81%D1%82%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D0%BA%20%C2%ABSVN,Subversion%20(%D0%B7%D0%B0%D1%80%D0%B5%D0%B3%D0%B8%D1%81%D1%82%D1%80%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D1%8B%D0%B9%20%D1%82%D0%BE%D0%B2%D0%B0%D1%80%D0%BD%D1%8B%D0%B9%20%D0%B7%D0%BD%D0%B0%D0%BA).
[ML]: https://ru.wikipedia.org/wiki/Mercurial#:~:text=Mercurial%20(%D1%81%20%D0%B0%D0%BD%D0%B3%D0%BB.,%D0%BE%D1%87%D0%B5%D1%80%D0%B5%D0%B4%D1%8C%20%D0%BE%D0%BD%D0%B0%20%D1%8F%D0%B2%D0%BB%D1%8F%D0%B5%D1%82%D1%81%D1%8F%20%D0%BA%D0%BE%D0%BD%D1%81%D0%BE%D0%BB%D1%8C%D0%BD%D0%BE%D0%B9%20%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%BE%D0%B9.
[GIT]: https://ru.wikipedia.org/wiki/Git#:~:text=Git%20(%D0%BF%D1%80%D0%BE%D0%B8%D0%B7%D0%BD%D0%BE%D1%81%D0%B8%D1%82%D1%81%D1%8F%20%C2%AB%D0%B3%D0%B8%D1%82%C2%BB)%20%E2%80%94%20%D1%80%D0%B0%D1%81%D0%BF%D1%80%D0%B5%D0%B4%D0%B5%D0%BB%D1%91%D0%BD%D0%BD%D0%B0%D1%8F%20%D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%B0%20%D1%83%D0%BF%D1%80%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F%20%D0%B2%D0%B5%D1%80%D1%81%D0%B8%D1%8F%D0%BC%D0%B8.
[CC]: https://www.conventionalcommits.org/en/v1.0.0/
[CLF]: https://github.com/ezhov-da/changelog-builder/blob/master/CHANGELOG.md
[CLB-PROJECT]: https://github.com/ezhov-da/changelog-builder
[GCT-PROJECT]: https://github.com/ezhov-da/git-commit-template
[SQUASH]: https://git-scm.com/docs/git-rebase#_interactive_mode
[PUSH-FORCE]: https://git-scm.com/docs/git-push#Documentation/git-push.txt---force
[GIT-HOOK]: https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks
[COMMIT-MSG]: https://github.com/ezhov-da/git-hook/blob/main/commit-msg
